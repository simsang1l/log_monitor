input {
  file {
    path => "/data/ssh-2025*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "tail"
  }
}

filter {
  grok {
    match => { "message" => "%{SYSLOGTIMESTAMP:ts_no_year} %{GREEDYDATA:msg}" }
  }
  # source_path 복사 + source_file 추출
  ruby {
    code => "
      if event.get('[log][file][path]')
        full = event.get('[log][file][path]')
        event.set('source_path', full)
        event.set('source_file', File.basename(full))
      end
      event.set('log_type', 'ssh')
    "
  }

  # ex. filename = ssh-20240101.log
  ruby {
    code => "
      if event.get('source_file')
        sf = event.get('source_file')
        event.set('log_year', sf[4,4])
        event.set('log_month', sf[8,2])
        event.set('log_day', sf[10,2])
      end
    "
  }

  mutate {
    add_field => { "ts_with_year" => "%{log_year} %{ts_no_year}" }
  }

  date {
    match   => ["ts_with_year",
                "YYYY MMM  d HH:mm:ss",   # 공백 2칸(1‑9일)
                "YYYY MMM dd HH:mm:ss"]   # 공백 1칸(10‑31일)
    target  => "event_time"
    locale  => "en"                       # 월 약어는 영문
    # timezone => "Asia/Seoul"              # 필요 시 지정
  }
  
  fingerprint {
    source => ["source_path", "message"]
    target => "row_hash"
    method => "SHA256"
  }

  # 불필요한 필드 제거
  mutate {
    remove_field => ['host', 'tags', 'event', 'log']
  }
}

output {
  kafka {
    bootstrap_servers => "kafka1:29092"
    topic_id => "ssh-log"
    codec => json
    acks => "all"
  }
}