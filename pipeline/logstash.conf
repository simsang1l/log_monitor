input {
  file {
    path => "/data/ssh-*.log"
    mode => "read"
    file_completed_action => "delete"
    file_completed_log_path => "/logs/ssh-*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    max_open_files => 1          # 동시에 한 파일만 읽음
    file_chunk_size => 1000 # 많이 변경해서 확인해보기
  }
}

filter {
  # 읽어온 파일 경로(source_path), 로그가 발생한 호스트 정보(host_name)
  # 로그의 원본 값(message) 가져오기
  # log_type 설정(ssh)
  mutate {
    add_field => {
      "source_path" => "%{[log][file][path]}"
      "host_name" => "%{[host][name]}"
      "log_type" => "ssh"
    }
  }

  mutate { copy => { "source_path" => "source_file" } }

  mutate {
    gsub => [
      "source_file", ".*/",     "",   # 경로 제거
      "source_file", "^ssh-",   "",   # 접두어 제거
      "source_file", "\\.log$", ""    # 확장자 제거
    ]
  }

  grok { match => { "message" => "%{SYSLOGTIMESTAMP:log_time}" } }

  ruby {
    code => "
      if event.get('source_file')
        event.set('log_year', event.get('source_file')[0..3])
      end
    "
  }

  # ❷ KST ISO 8601 문자열을 보조 필드로 생성 (+09:00 오프셋 포함), event_time_kst_iso
  ruby {
    code => '
      if event.get("log_year") && event.get("log_time")
        str = "#{event.get("log_year")} #{event.get("log_time")}"
        t   = Time.strptime(str, "%Y %b %e %H:%M:%S").getlocal("+09:00")
        event.set("event_time_kst_iso", t.iso8601(3))   # 2024-01-01T21:47:05.000+09:00
      end
    '
  }

  # ❸ date 필터는 그대로(@timestamp 또는 event_time) – UTC 저장
  date {
    match   => ["event_time_kst_iso", "ISO8601"]
                # "yyyy MMM  d HH:mm:ss",
                # "yyyy MMM dd HH:mm:ss"]
    target   => "event_time"
    timezone => "Asia/Seoul"
  }
  
  # row별 식별을 위한 hash id 생성
  fingerprint {
    source => ["source_path", "event_time", "message"]
    target => "row_hash"
    method => "SHA256"
  }

  # 불필요한 필드 제거
  mutate {
    remove_field => ['event', 'log', 'host', '@version', 'log_year', 'log_time']
  }
}

output {
  kafka {
    bootstrap_servers => "kafka1:29092"
    topic_id => "ssh-log"
    codec => json
    acks => "all"
  }
} 