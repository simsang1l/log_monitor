version: "3.9"

networks:
  pipeline-net:
    driver: bridge

volumes:
  esdata:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  airflow-db:
  zookeeper_data:
  zookeeper_log:

services:
  # ───────────────────────── Kafka & ZooKeeper (Confluent 7.3.0) ─────────────────────────
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - pipeline-net

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:29092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pipeline-net

  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    volumes:
      - kafka2_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9093:9093"
      - "29093:29093"
    healthcheck:
      test: kafka-topics --bootstrap-server kafka2:29093 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pipeline-net

  kafka3:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka3
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    volumes:
      - kafka3_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9094:9094"
      - "29094:29094"
    healthcheck:
      test: kafka-topics --bootstrap-server kafka3:29094 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pipeline-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3  
    ports:  
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: multi-broker-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093,kafka3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - pipeline-net

  # # ───────── Elasticsearch·Logstash·Kibana 8.13.0 ─────────
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
  #   container_name: es
  #   environment:
  #     discovery.type: single-node
  #     ES_JAVA_OPTS: -Xms1g -Xmx1g
  #     bootstrap.memory_lock: "true"
  #     # 보안 활성화 (기본값)
  #     xpack.security.enabled: "true"
  #     # 초기 사용자 설정
  #     ELASTIC_PASSWORD: "elastic123"
  #   ulimits:
  #     memlock: { soft: -1, hard: -1 }
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - pipeline-net
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.0
    container_name: logstash
    volumes:
      - ./data:/data                # 호스트의 로그 디렉토리 마운트
      - ./pipeline/:/usr/share/logstash/pipeline/
    depends_on: 
      - kafka1
      - kafka2
      - kafka3
    networks:
      - pipeline-net

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.13.0
  #   container_name: kibana
  #   environment:
  #     ELASTICSEARCH_HOSTS: http://es:9200
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - pipeline-net

  # # ───────── Spark, Airflow, Grafana ─────────
  # spark-master:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.spark
  #   container_name: spark-master
  #   hostname: spark-master
  #   ports:
  #     - "8090:8080"  # 웹 UI
  #     - "7077:7077"  # 마스터 포트
  #   environment:
  #     - SPARK_MODE=master
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_USER=spark
  #     - HOME=/opt/bitnami/spark
  #   volumes:
  #     - ./:/opt/bitnami/spark/work
  #   networks:
  #     - pipeline-net
  # spark-worker-1:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.spark
  #   container_name: spark-worker-1
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - "8091:8081"  # 워커 웹 UI
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=2G
  #     - SPARK_WORKER_CORES=2
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_USER=spark
  #     - HOME=/opt/bitnami/spark
  #   volumes:
  #     - ./:/opt/bitnami/spark/work
  #   networks:
  #     - pipeline-net

  # airflow-db:
  #   image: postgres:16
  #   container_name: airflow-db
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes: [airflow-db:/var/lib/postgresql/data]
  #   networks:
  #     - pipeline-net

  # airflow-web:
  #   build:
  #     context: ./docker/airflow
  #   container_name: airflow-web
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
  #     AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  #   depends_on: [airflow-db]
  #   ports: ["8081:8080"]
  #   networks:
  #     - pipeline-net

  # airflow-scheduler:
  #   build:
  #     context: ./docker/airflow      # ← 같은 이미지 재사용
  #   container_name: airflow-scheduler
  #   command: scheduler
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
  #     AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  #   depends_on: [airflow-web]
  #   networks:
  #     - pipeline-net

  # grafana:
  #   image: grafana/grafana:11.0.0
  #   container_name: grafana
  #   environment:
  #     GF_INSTALL_PLUGINS: grafana-elasticsearch-datasource
  #   ports: ["3000:3000"]
  #   networks:
  #     - pipeline-net




